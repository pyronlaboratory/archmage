[
  {
    "name": "CHM.py",
    "path": "archmage/CHM.py",
    "content": {
      "structured": {
        "description": "A class `CHMEntry` that can read and manipulate CHM entry content. It provides methods for reading the entry content, lower-casing links, restoring framing if necessary, and returning the final content. The class utilizes the `re` module for regular expression pattern matching and substitution, as well as the `os` module for working with file paths.",
        "items": [
          {
            "id": "b1068d58-9517-d394-ab4d-78a86a09ae6d",
            "ancestors": [],
            "description": "Defines five enums representing different actions for handling CHM files: `EXTRACT`, `DUMPHTML`, `CHM2TXT`, `CHM2HTML`, and `CHM2PDF`.",
            "attributes": [
              {
                "name": "EXTRACT",
                "type_name": "Enum",
                "description": "1."
              },
              {
                "name": "DUMPHTML",
                "type_name": "int",
                "description": "2 in value, indicating that it performs the action of dumping HTML content to a file or directory."
              },
              {
                "name": "CHM2TXT",
                "type_name": "3digit",
                "description": "3-dimensional, meaning it can be any combination of three values: 1, 2, or 3."
              },
              {
                "name": "CHM2HTML",
                "type_name": "int",
                "description": "4th in the enumeration, representing the action of converting CHM files to HTML format."
              },
              {
                "name": "CHM2PDF",
                "type_name": "Integer",
                "description": "5, indicating that it is a method for converting Chemical Markup Language (ChemML) files to Portable Document Format (PDF) files."
              }
            ],
            "name": "Action",
            "location": {
              "start": 52,
              "insert": 53,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7579e699-523b-6881-0a47-d4e051a98a2f",
            "ancestors": [],
            "description": "Provides methods for listing and retrieving files from a CHM (Help File) file, as well as a `close()` method to release resources when no longer needed.",
            "attributes": [
              {
                "name": "_chm",
                "type_name": "chmlibChmFile",
                "description": "Used to manage a CHM file."
              }
            ],
            "name": "FileSource",
            "location": {
              "start": 63,
              "insert": 64,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 32,
            "docLength": null
          },
          {
            "id": "daa6841b-d2b9-8e8e-504b-5cbf3be8cc28",
            "ancestors": [
              "7579e699-523b-6881-0a47-d4e051a98a2f"
            ],
            "description": "Within the `FileSource` class enumerates files and directories within a Chemical Document Management (CDM) file using the `chm_enumerate` function from the CHMLIB library. It appends the path of each file or directory to a list (`out`) and returns the list.",
            "params": [],
            "returns": {
              "type_name": "Liststr",
              "description": "An enumerated list of file paths from a given Chemistry Machine (CHM) file."
            },
            "name": "listdir",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "6a0d73ad-6118-24a7-e142-b36d69ae0cc0",
            "ancestors": [
              "7579e699-523b-6881-0a47-d4e051a98a2f",
              "daa6841b-d2b9-8e8e-504b-5cbf3be8cc28"
            ],
            "description": "Takes a `chmfile`, `ui`, and `out` parameters, and appends the path to a list if it is not the root directory `/`.",
            "params": [
              {
                "name": "chmfile",
                "type_name": "object",
                "description": "Used to represent a file path."
              },
              {
                "name": "ui",
                "type_name": "chmfilePath",
                "description": "Used to store the path of the UI file."
              },
              {
                "name": "out",
                "type_name": "stdvectorstdstring",
                "description": "Used to store the paths of the files found in the given directory."
              }
            ],
            "returns": {
              "type_name": "chmlibCHM_ENUMERATOR_CONTINUE",
              "description": "A  value returned by the CHM enumerator."
            },
            "name": "get_name",
            "location": {
              "start": 68,
              "insert": 69,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "db571898-3c06-8ea2-ed42-9e1703dc7db0",
            "ancestors": [
              "7579e699-523b-6881-0a47-d4e051a98a2f"
            ],
            "description": "Resolves an object in the CHM file using the `chmlib.chm_resolve_object()` method, retrieves the contents of the resolved object using the `chmlib.chm_retrieve_object()` method, and returns the retrieved content.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Used to resolve an object in the CHM library."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "A resolved and retrieved object from the CHM library."
            },
            "name": "get",
            "location": {
              "start": 84,
              "insert": 85,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "b361e6f9-be15-cd83-ef4f-00a57f460145",
            "ancestors": [],
            "description": "Provides methods for listing directory contents and reading file contents, along with a `close()` method for cleaning up resources.",
            "attributes": [
              {
                "name": "dirname",
                "type_name": "str",
                "description": "Initialized in the constructor with the value passed as argument to the constructor. It represents \nthe root directory of the source files to be listed or read from."
              }
            ],
            "name": "DirSource",
            "location": {
              "start": 97,
              "insert": 98,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 18,
            "docLength": null
          },
          {
            "id": "fb950074-17aa-7e94-f34d-7b69b7826cab",
            "ancestors": [
              "b361e6f9-be15-cd83-ef4f-00a57f460145"
            ],
            "description": "Recursively traverses subdirectories of a specified directory and returns a list of relative file paths within those subdirectories.",
            "params": [],
            "returns": {
              "type_name": "list",
              "description": "A collection of strings representing the file paths relative to the directory path provided as an argument."
            },
            "name": "listdir",
            "location": {
              "start": 100,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "e60dca59-3017-558d-ba4a-ff8899ee5700",
            "ancestors": [
              "b361e6f9-be15-cd83-ef4f-00a57f460145"
            ],
            "description": "Within the `DirSource` class reads a file from a specified directory and returns its contents as a binary read stream.",
            "params": [
              {
                "name": "filename",
                "type_name": "str",
                "description": "Used to specify the file name to read from."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "The result of reading a file from a specified directory and file name."
            },
            "name": "get",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "5eab4266-49a5-e1a4-434d-9cca34158fd1",
            "ancestors": [],
            "description": "Manages the extraction and processing of CHM files, including creating a temporary directory for storing extracted content, and executing various commands to create HTML or PDF outputs. It also provides methods for extracting individual entries from the CHM file and manipulating images within the file.",
            "attributes": [
              {
                "name": "cache",
                "type_name": "instance",
                "description": "Used to keep track of the files that have been extracted from a CHM file. It stores a set of tuples, each containing the file name and its corresponding path."
              },
              {
                "name": "source",
                "type_name": "instance",
                "description": "Used to represent the source file or directory from which the CHM content will be extracted."
              },
              {
                "name": "sourcename",
                "type_name": "str",
                "description": "Used to store the source name or path from where the CHM files are extracted."
              },
              {
                "name": "__dict__",
                "type_name": "instance",
                "description": "A dictionary containing all the attributes and methods of the class, which can be accessed by their name."
              },
              {
                "name": "aux_re",
                "type_name": "regular",
                "description": "Used to match names that are not valid CHM entries but may still be interesting or problematic, such as parent directories or malicious filenames."
              },
              {
                "name": "auxes",
                "type_name": "list",
                "description": "Used to store regular expressions for matching entries that should be skipped \nduring extraction. The regular expressions are used to identify malicious or \nundesirable entries in the CHM file."
              },
              {
                "name": "topicstree",
                "type_name": "instance",
                "description": "A list of tuples, where each tuple contains a topic name and a list of subtopics related to that topic. It is used to store the hierarchical structure of the CHM document's topics."
              },
              {
                "name": "topics",
                "type_name": "instance",
                "description": "A list of tuples, where each tuple contains a topic name and a list of file paths that belong to that topic. It is used to keep track of the files related to each topic in the CHM document."
              },
              {
                "name": "contents",
                "type_name": "str",
                "description": "Used to store a list of file paths that are extracted from the CHM file using the `extract_entries()` method."
              }
            ],
            "name": "CHM",
            "location": {
              "start": 117,
              "insert": 118,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 277,
            "docLength": null
          },
          {
            "id": "45446724-3667-3495-2642-1aee807927f9",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Initializes an instance of `CHM` by setting member variables, compiling code from a configuration file, and creating a `SitemapFile` object to store the topic tree.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Used to set the name of the configuration file or directory being initialized."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 118,
              "insert": 119,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "22427640-5601-2499-f24c-8c8d46e6b86e",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Retrieves and caches the list of entries associated with an instance of the `CHM` class, or computes and cache them if they are not already present in the cache.",
            "params": [],
            "returns": {
              "type_name": "list",
              "description": "A cache of entries."
            },
            "name": "entries",
            "location": {
              "start": 147,
              "insert": 148,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d0f1e1b4-07b5-9cbb-2948-0a12097cea92",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Retrieves and stores a list of HTML files associated with an object of class `CHM` in its cache for future use.",
            "params": [],
            "returns": {
              "type_name": "list",
              "description": "A cache of the html files in the system."
            },
            "name": "html_files",
            "location": {
              "start": 158,
              "insert": 159,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1343904a-1a09-deb0-5740-1bfb19418361",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Within the CHM class takes the `PageLister` object as input, feeds it with the `topicstree`, and returns the resulting pages list.",
            "name": "_html_files",
            "location": {
              "start": 163,
              "insert": 164,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "3da088a7-8e00-ffb5-8b41-d6ed6035c0b4",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Retrieves and stores image URLs in a class instance's cache for later use.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A cache of image URLs."
            },
            "name": "image_urls",
            "location": {
              "start": 170,
              "insert": 171,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "28aa1451-3add-0193-234c-441eba1d5997",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Within the CHM class fetches images from HTML files and adds them to a list of image URLs.",
            "name": "_image_urls",
            "location": {
              "start": 175,
              "insert": 176,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "14753d05-519b-43a0-ba4a-74513fe6669d",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the `CHM` class retrieves and caches a list of image files for the current application.",
            "params": [],
            "returns": {
              "type_name": "list",
              "description": "A cache of image files."
            },
            "name": "image_files",
            "location": {
              "start": 192,
              "insert": 193,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "38638280-bfa4-0d92-4340-39bb08f9e843",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the CHM class takes an input of self.image_urls() and then iterates through each entry in the list. If a match is found between the entry and image_url, it updates the output dictionary with the entry and its corresponding image URL. Finally, it returns the updated output dictionary.",
            "name": "_image_files",
            "location": {
              "start": 197,
              "insert": 198,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "2e6691da-dd0f-b791-4243-4ddc97b98dd7",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Retrieves and caches a list of topics associated with an instance of the `CHM` class, if not already cached.",
            "params": [],
            "returns": {
              "type_name": "list",
              "description": "A cache of the topics as obtained from calling the private method `_topics`."
            },
            "name": "topics",
            "location": {
              "start": 209,
              "insert": 210,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "8bf3625c-612f-c2bc-1946-7b5e1cec2d51",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Within a `CHM` class takes an `Entry` object as input and returns a new `Entry` object with additional properties based on the original input.",
            "name": "_topics",
            "location": {
              "start": 214,
              "insert": 215,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "11ad0be1-8581-d2a5-4843-d49c969a5222",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the `CHM` class determines whether a given topic has already been defined in the cache and returns the cached value if it exists, or calls the `_deftopic` method to create a new definition otherwise.",
            "params": [],
            "returns": {
              "type_name": "object",
              "description": "Stored in a cache for future use."
            },
            "name": "deftopic",
            "location": {
              "start": 226,
              "insert": 227,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "b61ac8a7-1ce1-8281-b64e-820886339944",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the CHM class checks if the input HTML file starts with a slash, and if so, removes it and returns the remaining part in lowercase. If not, it simply returns the HTML file in lowercase.",
            "name": "_deftopic",
            "location": {
              "start": 231,
              "insert": 232,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "143864b4-fcc5-e6a8-fc47-9429a31c9c77",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Determines if it has been called before, and if not, it calls its internal method `_frontpage` to generate the front page content, then stores it in the cache for future use.",
            "params": [],
            "returns": {
              "type_name": "object",
              "description": "Cache entry containing a page to display as front page."
            },
            "name": "frontpage",
            "location": {
              "start": 237,
              "insert": 238,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "bb2409f2-4cc4-7185-a54c-b6ab08f9a5a8",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Determines the front page of a web application by checking if a given file is the index file, and if so, creates a new index file with a numbered name.",
            "name": "_frontpage",
            "location": {
              "start": 242,
              "insert": 243,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "aa2f5f36-7c89-be83-0a40-338f457c2ae5",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Retrieves a list of templates belonging to an instance of the `CHM` class from its cache if it's not already stored, then returns the stored list.",
            "params": [],
            "returns": {
              "type_name": "dict",
              "description": "A cache of templates."
            },
            "name": "templates",
            "location": {
              "start": 252,
              "insert": 253,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "145b643c-171f-7080-d647-5b92b2e655a6",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the CHM class lists all files in a directory and filters them based on whether they are already included in a list of entries, returning the remaining files.",
            "name": "_templates",
            "location": {
              "start": 257,
              "insert": 258,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "f918503b-b1e0-f08f-0749-ce7dbfa7020f",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the `CHM` class returns a cached value or computes it from the `_toclevels` method if it's not already in the cache.",
            "params": [],
            "returns": {
              "type_name": "dict",
              "description": "A cache of toclevels for the given instance of the class."
            },
            "name": "toclevels",
            "location": {
              "start": 266,
              "insert": 267,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "807c6f71-22df-b39b-0d47-f3343c029e00",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Counts the number of topics at each level in a given hierarchy and returns the maximum level reached or the total number of topics if it exceeds the maximum allowed level.",
            "name": "_toclevels",
            "location": {
              "start": 271,
              "insert": 272,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "357d4f31-d374-a09e-4a43-7bbf2761aac8",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the `CHM` class retrieves an HTML template based on the input `name` and replaces placeholders with class variables values, returning the substituted template as a string.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Used to specify the name of the template to be loaded from the templates directory."
              }
            ],
            "returns": {
              "type_name": "stringTemplate",
              "description": "A instance of class `string.Template` that has been filled with placeholders substituted with values from a dictionary."
            },
            "name": "get_template",
            "location": {
              "start": 280,
              "insert": 281,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 280,
                "end": 281
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 1
          },
          {
            "id": "71a93fbe-1cc9-24b6-8f48-0bf5c9cac9c2",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Writes HTML files and icons to a specified directory based on templates and frontpage.",
            "params": [
              {
                "name": "destdir",
                "type_name": "str",
                "description": "Used to specify the directory where the templates are written. It has an initial value of \".\", which means the current working directory."
              }
            ],
            "returns": null,
            "name": "process_templates",
            "location": {
              "start": 297,
              "insert": 298,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 297,
                "end": 298
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 1
          },
          {
            "id": "5e9f114f-c925-2fbf-ad41-fa3b62c471d8",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Takes an entry object, an output file path, and a flag for correctness or not, and creates or overwrites the corresponding entry file in the specified directory with the correct or incorrect content respectively.",
            "params": [
              {
                "name": "entry",
                "type_name": "Entry",
                "description": "Passed as an argument to the function. It represents an entry in a file or directory that needs to be extracted."
              },
              {
                "name": "output_file",
                "type_name": "str",
                "description": "Used to specify the output file for writing extracted entries."
              },
              {
                "name": "destdir",
                "type_name": "str",
                "description": "Used to specify the directory where the output file will be saved. It can be either an absolute path or a relative path from the current working directory."
              },
              {
                "name": "correct",
                "type_name": "bool",
                "description": "Used to indicate whether the entry should be corrected or not during extraction."
              }
            ],
            "returns": null,
            "name": "extract_entry",
            "location": {
              "start": 312,
              "insert": 314,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "cb8c4372-4101-399a-9a44-068856664b0f",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "In the `CHM` class takes an optional list of entries, searches for malicious names, and extracts entries matching a regular expression pattern or a parent directory.",
            "params": [
              {
                "name": "entries",
                "type_name": "listarray",
                "description": "An array of strings representing files or paths to files that need to be extracted."
              },
              {
                "name": "destdir",
                "type_name": "str",
                "description": "Used to specify the directory where the extracted entries will be saved. It has a default value of \".\"."
              },
              {
                "name": "correct",
                "type_name": "bool",
                "description": "Used to indicate whether the entry should be extracted with its original path or as a relative path within the destination directory."
              }
            ],
            "returns": null,
            "name": "extract_entries",
            "location": {
              "start": 342,
              "insert": 343,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 342,
                "end": 343
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 1
          },
          {
            "id": "94978732-6588-4b96-b04c-f1f2235611b9",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Performs an action on a destination directory, creating it if it does not exist and executing actions related to its entries and templates.",
            "params": [
              {
                "name": "destdir",
                "type_name": "str",
                "description": "Used to specify the destination directory for the extraction of the entries from the jar file."
              }
            ],
            "returns": null,
            "name": "extract",
            "location": {
              "start": 354,
              "insert": 355,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 354,
                "end": 355
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 1
          },
          {
            "id": "596fa9de-739d-aab4-914a-d134726c10f7",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Within the `CHM` class iterates over a list of HTML files and prints the contents of each file to the output stream if it does not match a specific regular expression pattern.",
            "params": [
              {
                "name": "output",
                "type_name": "object",
                "description": "Used to represent the destination for printing the output of the function."
              }
            ],
            "returns": null,
            "name": "dump_html",
            "location": {
              "start": 367,
              "insert": 368,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 367,
                "end": 368
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 1
          },
          {
            "id": "32387af6-630b-7c84-1443-dcc7ee5eead7",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Processes CHM files by calling the `chmtotext` command with input from an Entry object, and outputting the result to the specified destination.",
            "params": [
              {
                "name": "output",
                "type_name": "object",
                "description": "Used to specify the destination for the generated text."
              }
            ],
            "returns": null,
            "name": "chm2text",
            "location": {
              "start": 380,
              "insert": 381,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 380,
                "end": 381
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 1
          },
          {
            "id": "659d93f8-a739-5e9d-a241-d04d8f50e470",
            "ancestors": [
              "5eab4266-49a5-e1a4-434d-9cca34158fd1"
            ],
            "description": "Extracts CHM content into a temporary directory, processes images, and generates HTML or PDF output using the specified format and options.",
            "params": [
              {
                "name": "output",
                "type_name": "str",
                "description": "Used to specify the output file path for the generated HTML document, which can be a directory or a file name."
              },
              {
                "name": "format",
                "type_name": "str",
                "description": "Used to specify the output format of the documentation, which can be either CHM2HTML or CHM2PDF."
              }
            ],
            "returns": null,
            "name": "htmldoc",
            "location": {
              "start": 395,
              "insert": 396,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 395,
                "end": 396
              }
            },
            "item_type": "method",
            "length": 33,
            "docLength": 1
          },
          {
            "id": "cd2d72ba-c448-e8a3-8947-b5eff0231e00",
            "ancestors": [],
            "description": "Manages entry content, including reading and manipulating links, adding restore framing JavaScript, and returning the corrected entry content.",
            "attributes": [
              {
                "name": "source",
                "type_name": "object",
                "description": "Used to store a string containing the entry's content."
              },
              {
                "name": "name",
                "type_name": "str",
                "description": "Used to store the name of the entry."
              },
              {
                "name": "filename_case",
                "type_name": "str",
                "description": "Used to modify the file name in lower case when searching for links."
              },
              {
                "name": "restore_framing",
                "type_name": "bool",
                "description": "Used to specify whether the framing links should be restored or not."
              },
              {
                "name": "frontpage",
                "type_name": "ospathbasename",
                "description": "Used to specify the name of the file containing the front page content for the entry."
              }
            ],
            "name": "Entry",
            "location": {
              "start": 438,
              "insert": 439,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 438,
                "end": 439
              }
            },
            "item_type": "class",
            "length": 74,
            "docLength": 1
          },
          {
            "id": "72d9fbac-8b4e-4089-0f45-97209679124f",
            "ancestors": [
              "cd2d72ba-c448-e8a3-8947-b5eff0231e00"
            ],
            "description": "Of the `Entry` class initializes attributes with user-provided values: source, name, filename_case, restore_framing, and frontpage.",
            "params": [
              {
                "name": "source",
                "type_name": "object",
                "description": "Used to store the source code for a web page or document."
              },
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned the value passed as argument during initialization, representing the name of the page or resource being initialized."
              },
              {
                "name": "filename_case",
                "type_name": "str",
                "description": "Used to specify the case of the file name, which can be \"lower\", \"upper\", or \"title\"."
              },
              {
                "name": "restore_framing",
                "type_name": "int",
                "description": "1 by default, indicating that the frame should be restored when loading the HTML file."
              },
              {
                "name": "frontpage",
                "type_name": "ospathbasename",
                "description": "Set to the value of \"index.html\" by default, indicating that the initial front page of the web application should be the file named \"index.html\"."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 441,
              "insert": 450,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "71cfc687-34dd-cabb-ba44-0decee42c1ef",
            "ancestors": [
              "cd2d72ba-c448-e8a3-8947-b5eff0231e00"
            ],
            "description": "Replaces certain words in a given string with their lowercase versions, specifically the keywords `href` and `src`.",
            "params": [
              {
                "name": "text",
                "type_name": "str",
                "description": "A string of text to be processed for lowercase links."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "The result of applying a regular expression to the input string using a lambda function."
            },
            "name": "lower_links",
            "location": {
              "start": 461,
              "insert": 462,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 461,
                "end": 462
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 1
          },
          {
            "id": "fc45d938-974d-9ca6-824b-dbbd7c3b27b6",
            "ancestors": [
              "cd2d72ba-c448-e8a3-8947-b5eff0231e00"
            ],
            "description": "Modifies JavaScript code based on the `name` parameter, replacing certain characters and generating a new script tag with depth-dependent modifications.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Used to generate a script tag for restoring framing pages."
              },
              {
                "name": "text",
                "type_name": "HTML",
                "description": "Modified by replacing any occurrence of `<body>` with the encoded JavaScript code."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A modified version of the input string `text`, with certain elements replaced or removed using regular expressions and string concatenation."
            },
            "name": "add_restoreframing_js",
            "location": {
              "start": 469,
              "insert": 470,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "eb967df1-bcb9-c5b6-8b4d-000362c26ecb",
            "ancestors": [
              "cd2d72ba-c448-e8a3-8947-b5eff0231e00"
            ],
            "description": "Reads data from an entry, modifies it by removing certain tags and strings, and returns the modified data.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A modified version of the input data, with certain elements removed or replaced."
            },
            "name": "correct",
            "location": {
              "start": 484,
              "insert": 485,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 484,
                "end": 485
              }
            },
            "item_type": "method",
            "length": 21,
            "docLength": 1
          },
          {
            "id": "ee96fd9c-68bf-a6b0-af49-62e3241bef8c",
            "ancestors": [
              "cd2d72ba-c448-e8a3-8947-b5eff0231e00"
            ],
            "description": "Retrieves entry content by reading its file and performing modifications based on the object's properties, such as lowercasing links and restoring framing HTML tags if necessary. It returns the modified content or an empty string if none exists.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A string containing the entry content."
            },
            "name": "get",
            "location": {
              "start": 510,
              "insert": 511,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 510,
                "end": 511
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 1
          }
        ]
      }
    }
  },
  {
    "name": "__init__.py",
    "path": "archmage/__init__.py",
    "content": {
      "structured": {
        "description": "A function `file2dir` that takes a file name as input and generates a directory name based on the file's name and an added suffix \"_html\". The directory name is created by splitting the file name into its component parts, appending the desired suffix to the first part, and then returning the resulting directory name. The code also includes imports from the `os` and `pkg_resources` packages, which provide functionality for working with system files and resources, respectively.",
        "items": [
          {
            "id": "12de3f94-479f-9c95-d049-29d906f20915",
            "ancestors": [],
            "description": "Takes a filename as input and returns the corresponding directory name by concatenating the file name with an underscore and the string \"html\".",
            "params": [
              {
                "name": "filename",
                "type_name": "str",
                "description": "The name of a file to convert into a directory path."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "The concatenation of the directory name and `_html`."
            },
            "name": "file2dir",
            "location": {
              "start": 34,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 34,
                "end": 35
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 1
          }
        ]
      }
    }
  },
  {
    "name": "__init__.py",
    "path": "__init__.py",
    "content": {
      "structured": {
        "description": "A `Person` class with attributes for name, age, and favorite hobby, as well as a constructor and two methods: `sayHello()` and `printHobbies()`. The `sayHello()` method simply returns a string containing the person's name, while the `printHobbies()` method prints out a message indicating the person's favorite hobby.",
        "items": []
      }
    }
  }
]